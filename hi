// This code is based on a program called "Sweep"
// by BARRAGAN <http://barraganstudio.com> 
// (which is an example placed in the public domain found under the example menu of the Arduino IDE)
// and we also utilize the Servo.h Library

//Creative commons license for my modifications
//
//I created additional functions created for handling continuous-rotation-servos as motors
//Forward, Backward, RotateLeft, RotateRight, Stop, and attachServo
//by gskielian  < http://www.kielian.net > 

double ForwardSpeed = 100;
double RotateSpeed = 100;
double BackwardSpeed = 100;
int trigPin = 2;
int echoPin = 4;
long cm, duration, distance;

#include <Servo.h> 
 
Servo LeftWheel;  // create servo object to control a servo 
Servo RightWheel;  // create servo object to control a servo 
Servo Tail;
// Note: a maximum of eight servo objects can be created 

int LWPin = 9; //set the pin number for your left servo-motors (just change the number if not pin 9)
int RWPin = 10; //right-wheel control pin
int TailPin =11;


void setup() 
{ 
 LeftWheel.attach( LWPin );  //  Connects LeftWheel to the pin LWPin
 RightWheel.attach( RWPin );  // Connects another wheel to be controlled by the pin RWPin
 Tail.attach( TailPin );  // Connects another wheel to be controlled by the pin RWPin

pinMode(5,OUTPUT);
pinMode(trigPin,OUTPUT);
pinMode(echoPin,INPUT);

} 
 
 
void loop() 
{ 
  cm = getDistance();
  if (cm > 10)
 {
  Forward(0.5);
            wag(1000,1);
  }
  else if (cm < 10)
 {
  Backward(2);
  wag(1000, 2);
  int coinFlip = random(1); //either 0 or 1
     if(  coinFlip == 1)
     {
      wag(1000, 3);
      RotateRight(1);
     }
     if (coinFlip == 0)
     {
       wag(1000, 4);
      RotateLeft(1);
     }
  }
}

void blinky(int x, int times)
{
  for (int i=0 ; i < times; i++)
  {
  digitalWrite(5, HIGH);
  delay(x);
  digitalWrite(5, LOW);
  delay(x);
  }  
}

void wag(int x, int times)
{
  for (int i=0 ; i < times; i++)
  {
Tail.write(30);
delay(x);
  Tail.write(150);
  delay(x);

   }  
}




void Forward(double seconds)
{
    double speed = ForwardSpeed;

     attachServos(); //in case we disconnected them

     //The CRS thinks it is always at 90 degrees
     //if you tell it to go to 180 degrees it will go really fast clock-wise
     //0 degrees really quickly counterclockwise
     // 95 really slowly clockwise
     
    double leftspeed = (-speed/100.0*90.0 + 90) ;
    double rightspeed = (speed/100.0*90.0 + 90) ;  // translates it to servo-speak (servo input is from 0-180)
    
    LeftWheel.write( (int) leftspeed);             
    RightWheel.write((int) rightspeed); // Right wheel is backwards
 
   //delay wants an integer number of milliseconds, we turn seconds to milliseconds
   //then we turn the result into an int
   delay((int) (seconds*1000)); 
}



void Backward ( double seconds)
{
    double speed = BackwardSpeed; 

    attachServos(); //in case we disconnected them

    double leftspeed = (speed/100.0*90.0 + 90) ;
    double rightspeed = (-speed/100.0*90.0 + 90) ;  // translates it to servo-speak (servo input is from 0-180)
    
    LeftWheel.write( (int) leftspeed);             
    RightWheel.write((int) rightspeed);
    
    delay((int) (seconds*1000));
}



void RotateLeft (double seconds)
{
    double speed = RotateSpeed;

    attachServos(); //in case we disconnected them

    double leftspeed = (speed/100.0*90.0 + 90) ;  // translates it to servo-speak (servo input is from 0-180)
    double rightspeed = (speed/100.0*90.0 + 90) ;  // translates it to servo-speak (servo input is from 0-180)
    
    LeftWheel.write((int) leftspeed);             
    RightWheel.write((int) rightspeed);
    delay((int) (seconds*1000));
}

void RotateRight (double seconds)
{
    double speed = RotateSpeed;
    
    attachServos(); //in case we disconnected them
     
    double leftspeed =  (-speed/100.0*90.0 + 90) ;  // translates it to servo-speak (servo input is from 0-180)
    double rightspeed =  (-speed/100.0*90.0 + 90) ;  // translates it to servo-speak (servo input is from 0-180)
    
    LeftWheel.write((int) leftspeed);             
    RightWheel.write((int) rightspeed); 

    delay((int) (seconds*1000));
}


void Stop( double seconds)
{
  LeftWheel.detach();  //to stop the motors, we have the Arduino stop sending signals entirely
  RightWheel.detach();

  delay((int) (seconds*1000));
}





void attachServos()
{
   LeftWheel.attach(LWPin);
   RightWheel.attach(RWPin);
}
long getDistance() 
{  
//give the module nudge
//a pulse.  __--__ 
digitalWrite(trigPin, LOW);
delayMicroseconds(2);
digitalWrite(trigPin, HIGH);
delayMicroseconds(10); 
digitalWrite(trigPin, LOW);
 
duration = pulseIn(echoPin, HIGH);
cm = microsecondsToCentimeters(duration);
 
return cm;
}  
 
 
long microsecondsToCentimeters(long microseconds) {
  return microseconds / 29 / 2;
}
